syntax = "proto3";

option csharp_namespace = "Raft";

message LeaderQueryRequest{
}

message LeaderQueryReply{
  string host = 1;
  int32 port = 2;
}

service LeaderDiscoverySvc {
  rpc GetLeader (LeaderQueryRequest) returns (LeaderQueryReply);
}

message PingRequest{
}

message PingReply{
  string reply = 1;
}

service PingSvc {
  rpc Ping (PingRequest) returns (PingReply);
}

message NodeInfoRequest{
}

message NodeInfoReply{
  string name = 1;
  string role = 2;
  string address = 3;
  string leaderAddress = 4;
  string knownNodes = 5;
}

service NodeInfoSvc{
  rpc GetInfo (NodeInfoRequest) returns (NodeInfoReply);
}

message CommandRequest{
  string variable = 1;
  string operation = 2;
  int32 literal = 3;
}

message CommandReply{
  string result = 1;
}

service CommandSvc{
  rpc ApplyCommand (CommandRequest) returns (CommandReply);
}

message AppendEntriesRequest{
  int32 term = 1;
  string leaderId = 2;
  int32 prevLogIndex = 3;
  int32 prevLogTerm = 4;
  repeated CommandRequest entryCommands = 5;
  int32 leaderCommit = 6;
}

message AppendEntriesReply{
  int32 term = 1;
  bool success = 2;
}

service AppendEntriesSvc{
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesReply);
}

message RegisterNodeRequest {
  string name = 1;
  string host = 2;
  int32 port = 3;
}

message RegisterNodeRply {
  string reply = 1;
}

service RegisterNodeSvc{
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeRply);
}

message LogInfoRequest{
}

message LogInfoReply{
  string entries = 1;
}

service LogInfoSvc{
  rpc GetLogLInfo(LogInfoRequest) returns (LogInfoReply);
}